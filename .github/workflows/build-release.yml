name: Build and Release Pi Development Images

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

on:
  # Trigger on development version tag push
  push:
    tags:
      - 'v*-dev.*' # Triggers on development tags like v1.0.0-dev.1

  workflow_dispatch:
    inputs:
      version:
        description: 'Development version (e.g., v1.0.0-dev.1)'
        required: true
        type: string

env:
  IMG_NAME: aircast-rpi-arm64

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # For tag pushes, use the tag name as version
            VERSION="${{ github.ref_name }}"
          else
            # For manual dispatch, use the input
            VERSION="${{ inputs.version }}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Development release: $VERSION"

  build:
    needs: prepare
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            coreutils quilt parted qemu-user-static debootstrap zerofree zip \
            dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc \
            gpg pigz xxd arch-test bmap-tools

      - name: Enable binfmt_misc
        run: |
          sudo modprobe binfmt_misc || true
          sudo update-binfmts --enable || true

      - name: Build Pi image
        run: |
          # Run the build script
          sudo ./build.sh

      - name: Prepare artifacts
        id: artifacts
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Find the generated image
          IMAGE_PATH=$(find deploy -name "*.zip" -o -name "*.img" -o -name "*.img.gz" -o -name "*.img.xz" | head -n 1)
          
          if [ -z "$IMAGE_PATH" ]; then
            echo "❌ No image found in deploy directory"
            exit 1
          fi
          
          echo "📦 Found image: $IMAGE_PATH"
          
          # Get the file extension
          EXT="${IMAGE_PATH##*.}"
          
          # Rename to include version
          NEW_NAME="aircast-rpi-arm64-${VERSION}.${EXT}"
          cp "$IMAGE_PATH" "$NEW_NAME"
          
          echo "image_path=$NEW_NAME" >> $GITHUB_OUTPUT
          echo "image_name=$NEW_NAME" >> $GITHUB_OUTPUT
          
          # Create checksums
          sha256sum "$NEW_NAME" > "${NEW_NAME}.sha256"
          
          echo "✅ Prepared artifact: $NEW_NAME"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pi-image
          path: |
            ${{ steps.artifacts.outputs.image_path }}
            ${{ steps.artifacts.outputs.image_path }}.sha256

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: pi-image

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Aircast Pi Image ${{ needs.prepare.outputs.version }} (Development)
          body: |
            ## Aircast Raspberry Pi Development Image

            This is a development release of the Raspberry Pi image for Aircast.

            ### Installation
            1. Download the image file
            2. Flash it to an SD card using Raspberry Pi Imager or similar tool
            3. Insert the SD card into your Raspberry Pi and boot

            ### Default Credentials
            - Username: `pi`
            - Password: `raspberry`
            - Hostname: `aircast`

            **Important**: Please change the default password after first login!

            ### Checksums
            SHA256 checksums are provided for verification.
          draft: false
          prerelease: true
          files: |
            aircast-rpi-arm64-*.zip
            aircast-rpi-arm64-*.img
            aircast-rpi-arm64-*.img.gz
            aircast-rpi-arm64-*.img.xz
            aircast-rpi-arm64-*.sha256

  mirror-to-s3:
    needs: [prepare, build, release]
    if: needs.release.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Wait for GitHub release
        run: |
          echo "⏳ Waiting for GitHub release to be fully available..."
          sleep 30  # Give GitHub time to process the release

      - name: Download and mirror release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          echo "🔍 Fetching release assets for $VERSION..."
          
          # Get release info
          RELEASE_INFO=$(gh api repos/${{ github.repository }}/releases/tags/$VERSION)
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
          CREATED_AT=$(echo "$RELEASE_INFO" | jq -r '.created_at')
          
          echo "📦 Found release: $RELEASE_URL"
          
          # Create temp directory for downloads
          mkdir -p temp-assets
          cd temp-assets
          
          # Download all release assets
          echo "📥 Downloading release assets..."
          gh release download $VERSION -R ${{ github.repository }}
          
          # Upload to S3
          echo "📤 Uploading to S3..."
          
          # Upload all image files and checksums
          for file in aircast-rpi-arm64-*; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              aws s3 cp "$file" "s3://aircast-artifacts/pi-images-dev/$VERSION/$file" --acl public-read
            fi
          done
          
          # Create and upload metadata
          echo "📝 Creating release metadata..."
          cat > release-metadata.json << EOF
          {
            "version": "$VERSION",
            "release_url": "$RELEASE_URL",
            "created_at": "$CREATED_AT",
            "release_notes": $(echo "$RELEASE_BODY" | jq -Rs .),
            "github_release_id": "$RELEASE_ID",
            "mirror_url": "https://downloads.dev.aircast.one/pi-images/$VERSION/",
            "mirrored_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
          aws s3 cp release-metadata.json "s3://aircast-artifacts/pi-images-dev/$VERSION/metadata.json" --acl public-read
          
          # Update latest pointer
          echo "$VERSION" > latest-dev.txt
          aws s3 cp latest-dev.txt "s3://aircast-artifacts/pi-images-dev/latest.txt" --acl public-read
          
          echo "✅ Mirror complete!"
          echo "📍 Mirror URL: https://downloads.dev.aircast.one/pi-images/$VERSION/"
          
          cd ..
          rm -rf temp-assets

      - name: Invalidate CloudFront cache
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          echo "🔄 Invalidating CloudFront cache..."
          
          # Find CloudFront distribution for downloads.dev.aircast.one
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?contains(Aliases.Items, 'downloads.dev.aircast.one')].Id" \
            --output text)
          
          if [ -z "$DISTRIBUTION_ID" ]; then
            echo "⚠️  Warning: Could not find CloudFront distribution for downloads.dev.aircast.one"
            echo "Please check your CloudFront configuration"
          else
            echo "Found CloudFront distribution: $DISTRIBUTION_ID"
            
            # Create invalidation for latest.txt and the new version
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/pi-images-dev/latest.txt" "/pi-images-dev/$VERSION/*" \
              --query 'Invalidation.Id' \
              --output text)
            
            echo "Created invalidation: $INVALIDATION_ID"
            
            # Wait for invalidation to complete (with timeout)
            echo "Waiting for CloudFront invalidation to complete..."
            timeout 300 aws cloudfront wait invalidation-completed \
              --distribution-id $DISTRIBUTION_ID \
              --id $INVALIDATION_ID || echo "⚠️  Invalidation is taking longer than expected"
            
            echo "✅ CloudFront cache invalidated!"
          fi

  notify:
    needs: [prepare, build, release, mirror-to-s3]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate build summary
        run: |
          echo "## 🥧 Raspberry Pi Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name == 'push' && 'Tag Push' || 'Manual Dispatch' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Build:** ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** ${{ needs.release.result == 'success' && '✅ Success' || needs.release.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Mirror:** ${{ needs.mirror-to-s3.result == 'success' && '✅ Success' || needs.mirror-to-s3.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "### 🎉 Release Published" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Release:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.mirror-to-s3.result }}" == "success" ]; then
              echo "- **S3 Mirror:** https://downloads.dev.aircast.one/pi-images/${{ needs.prepare.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
              echo "- **Latest Version:** https://downloads.dev.aircast.one/pi-images/latest.txt" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the build logs above for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Console output
        run: |
          echo "🏁 Pi image build completed"
          echo "📊 Results:"
          echo "  - Trigger: ${{ github.event_name == 'push' && 'Tag Push' || 'Manual Dispatch' }}"
          echo "  - Version: ${{ needs.prepare.outputs.version }}"
          echo "  - Build Status: ${{ needs.build.result }}"
          echo "  - Release Status: ${{ needs.release.result }}"
          
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "🎉 Pi image release published - check GitHub releases"
          else
            echo "❌ Build or release failed - check logs for details"
          fi