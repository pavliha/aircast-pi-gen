name: Build AirCast Pi Image (Swarm Runner)

on:
  push:
    branches: [ main, develop, arm64 ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      stage_list:
        description: 'Stages to build'
        required: false
        default: 'stage0 stage1 stage2 stage3'
        type: string
      clean_build:
        description: 'Clean build'
        required: false
        default: true
        type: boolean

env:
  IMG_NAME: aircast-rpi-arm64

jobs:
  build:
    runs-on: [self-hosted, swarm, pi-build]  # Use our swarm runner labels
    timeout-minutes: 180

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup isolated build environment
        run: |
          # Create unique build identifier
          BUILD_ID="pi-build-$(date +%s)-${{ github.run_number }}"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          
          # Clean up previous builds if requested
          if [ "${{ inputs.clean_build }}" = "true" ]; then
            sudo rm -rf work/ deploy/image_*.zip deploy/*.log deploy/*.info
          fi
          
          # Create isolated network for this build (outside swarm)
          docker network create $BUILD_ID --driver bridge || true
          
          # Show available resources
          echo "=== System Resources ==="
          df -h /
          free -h
          echo "=== Docker Info ==="
          docker info --format 'Containers: {{.Containers}} | Images: {{.Images}} | Swarm: {{.Swarm.LocalNodeState}}'
          
          # Make scripts executable
          chmod +x build.sh build-docker.sh

      - name: Configure build
        run: |
          # Use workflow input if provided
          if [ -n "${{ inputs.stage_list }}" ]; then
            echo "STAGE_LIST=\"${{ inputs.stage_list }}\"" >> config
          fi
          
          # Add build metadata
          echo "IMG_DATE=$(date +%Y-%m-%d)" >> config
          echo "CONTAINER_NAME=pigen_${{ env.BUILD_ID }}" >> config
          
          # Show final config
          echo "Final configuration:"
          cat config

      - name: Build Pi Image (Swarm-Safe)
        run: |
          echo "🚀 Starting build at $(date) with ID: ${{ env.BUILD_ID }}"
          
          # Create completely isolated build environment
          cat > swarm-safe-build.sh << 'EOF'
#!/bin/bash
  set -e
  
  echo "Building Pi image in isolated container..."
  
  # Use standalone docker run (completely outside swarm)
  docker run --rm --privileged \
  --name "pigen_${{ env.BUILD_ID }}" \
  --network "${{ env.BUILD_ID }}" \
  --tmpfs /tmp:exec,nodev,nosuid,size=2g \
  -v "$(pwd):/pi-gen:rw" \
  -v "$(pwd)/work:/pi-gen/work:rw" \
  -v "$(pwd)/deploy:/pi-gen/deploy:rw" \
  -e IMG_NAME="${{ env.IMG_NAME }}" \
  -e CLEAN=1 \
  -e DEBIAN_FRONTEND=noninteractive \
  debian:bookworm-slim \
  bash -c "
  set -e
  cd /pi-gen
  
  # Install dependencies
  apt-get update -qq
  apt-get install -y -qq --no-install-recommends \
  coreutils quilt parted qemu-user-static debootstrap zerofree zip \
  dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file \
  git curl bc gpg pigz xxd sudo ca-certificates
  
  # Clean apt cache
  apt-get clean
  rm -rf /var/lib/apt/lists/*
  
  # Run pi-gen build
  echo 'Starting pi-gen build process...'
  ./build.sh
  
  echo 'Build completed successfully!'
  "
EOF
        
        chmod +x swarm-safe-build.sh
        
        # Execute the build
        ./swarm-safe-build.sh
        
        echo "✅ Build completed at $(date)"

- name: Verify build output
  run: |
    echo "📦 Build artifacts:"
    ls -la deploy/
    
    if ls deploy/image_*.zip 1> /dev/null 2>&1; then
      echo "✅ Image build successful"
      for img in deploy/image_*.zip; do
        echo "📊 $(basename $img): $(du -h $img | cut -f1)"
      done
    else
      echo "❌ No image found in deploy directory"
      exit 1
    fi

- name: Upload Pi Image
  uses: actions/upload-artifact@v4
  with:
    name: ${{ env.IMG_NAME }}-${{ github.run_number }}
    path: deploy/image_*.zip
    retention-days: 30

- name: Upload build info
  uses: actions/upload-artifact@v4
  if: always()
  with:
    name: build-info-${{ github.run_number }}
    path: |
      deploy/*.info
      deploy/*.log
    retention-days: 7

- name: Create release on tag
  if: startsWith(github.ref, 'refs/tags/')
  uses: softprops/action-gh-release@v1
  with:
    files: deploy/image_*.zip
    tag_name: ${{ github.ref_name }}
    name: AirCast Pi Image ${{ github.ref_name }}
    body: |
      ## AirCast Raspberry Pi Image
      
      **Build Details:**
      - Image: ${{ env.IMG_NAME }}
      - Stages: ${{ inputs.stage_list || 'stage0 stage1 stage2 stage3' }}
      - Built: $(date)
      - Commit: ${{ github.sha }}
      - Runner: Swarm-hosted
      
      **Installation:**
      1. Download the `.zip` file
      2. Extract and flash to SD card using Raspberry Pi Imager
      3. Boot your Pi and SSH with: `ssh pi@aircast.local`
      4. Default password: `raspberry` (change immediately)
    draft: false
    prerelease: false

- name: Cleanup (Swarm-Safe)
  if: always()
  run: |
    echo "🧹 Cleaning up build resources..."
    
    # Remove build-specific containers only
    docker ps -a --filter "name=pigen_${{ env.BUILD_ID }}" -q | xargs -r docker rm -f || true
    
    # Remove build network
    docker network rm ${{ env.BUILD_ID }} 2>/dev/null || true
    
    # Clean up workspace
    sudo rm -rf work/ 2>/dev/null || true
    
    # Safe docker cleanup (avoid swarm resources)
    docker image prune -f --filter "dangling=true" || true
    docker container prune -f --filter "label!=com.docker.swarm.service.name" || true
    
    # Verify swarm is healthy
    echo "🔍 Verifying swarm services:"
    docker service ls --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}" | head -5
    
    echo "💾 Remaining disk space:"
    df -h / | tail -1
